def load_data(stock, seq_len):
X_train = []
y_train = []
for i in range(seq_len, len(stock)): X_train.append(stock.iloc[i-seq_len : i, 0]) y_train.append(stock.iloc[i, 0])
#1 last 6189 days are going to be used in test X_test = X_train[110000:]
y_test = y_train[110000:]
#2 first 110000 days are going to be used in training X_train = X_train[:110000]
y_train = y_train[:110000]
#3 convert to numpy array X_train = np.array(X_train)
y_train = np.array(y_train) X_test = np.array(X_test)
y_test = np.array(y_test)
#4 reshape data to input into RNN models
X_train = np.reshape(X_train, (110000, seq_len, 1)) X_test = np.reshape(X_test, (X_test.shape[0], seq_len, 1)) return [X_train, y_train, X_test, y_test]
#create train, test data
seq_len = 20 #choose sequence length
X_train, y_train, X_test, y_test = load_data(df, seq_len) print('X_train.shape = ',X_train.shape) print('y_train.shape = ', y_train.shape) print('X_test.shape = ', X_test.shape)
print('y_test.shape = ',y_test.shape)
27
rnn_model = Sequential()
rnn_model.add(SimpleRNN(40,activation="tanh",return_sequences=True, input_shape=(X_tra in.shape[1],1)))
rnn_model.add(Dropout(0.15)) rnn_model.add(SimpleRNN(40,activation="tanh",return_sequences=True)) rnn_model.add(Dropout(0.15)) rnn_model.add(SimpleRNN(40,activation="tanh",return_sequences=False)) rnn_model.add(Dropout(0.15))
rnn_model.add(Dense(1))
rnn_model.summary()
rnn_model.compile(optimizer="adam",loss="MSE")
rnn_model.fit(X_train, y_train, epochs=10, batch_size=1000) rnn_predictions = rnn_model.predict(X_test)
rnn_score = r2_score(y_test,rnn_predictions)
print("R2 Score of RNN model = ",rnn_score)
def plot_predictions(test, predicted, title): plt.figure(figsize=(16,4))
plt.plot(test, color='blue',label='Actual power consumption data')
plt.plot(predicted, alpha=0.7, color='orange',label='Predicted power consumption data') plt.title(title)
plt.xlabel('Time')
plt.ylabel('Normalized power consumption scale')
plt.legend()
plt.show()
plot_predictions(y_test, rnn_predictions, "Predictions made by simple RNN model")
